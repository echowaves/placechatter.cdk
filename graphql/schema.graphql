schema {
  query: Query
  mutation: Mutation
  # subscription: Subscription
}

# ... ******************************************************
# ...                   types
# ... ******************************************************
type Phone {
  uuid: String!
  phoneNumber: String!
  nickName: String!
  token: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type ActivationRequest {
  uuid: String!
  phoneNumber: String!
  smsCode: String!
  confirmed: Boolean!
  createdAt: AWSDateTime!
  confirmedAt: AWSDateTime!
}

type Place {
  placeUuid: String!
  createdBy: String! #phone number
  placeName: String!
  streetAddress1: String!
  streetAddress2: String!
  city: String!
  country: String!
  district: String!
  isoCountryCode: String!
  postalCode: String!
  region: String!
  subregion: String!
  timezone: String!
  location: AWSJSON!
  distance: Float

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type PlaceRole {
  placeUuid: String!
  phoneNumber: String!
  role: String!
  createdAt: AWSDateTime!
}

type Photo {
  photoUuid: String!
  createdBy: String! #phone number
  active: Boolean!
  imgUrl: String!
  thumbUrl: String!

  createdAt: AWSDateTime!
}

type PlaceCard {
  placeUuid: String!
  createdBy: String! #phone number
  cardTitle: String!
  cardText: String!
  photoUuid: String
  createdAt: AWSDateTime!
}

type PlaceWithCards {
  place: Place!
  cards: [PlaceCard]
}

type PlacesFeed {
  places: [PlaceWithCards]
  # batch: String!
  # noMoreData: Boolean!
}
type PhotoForUpload {
  photo: Photo!
  uploadUrl: String!
}
# ... ******************************************************
# ...                   queries
# ... ******************************************************
type Query {
  nickNameTypeAhead(phoneNumber: String!, nickName: String!): Int!
  placeRead(
    # uuid: String!
    # phoneNumber: String!
    # token: String!

    placeUuid: String!
  ): PlaceWithCards!

  placesFeed(lat: Float!, lon: Float!): PlacesFeed
}

# ... ******************************************************
# ...                    mutations
# ... ******************************************************
type Mutation {
  activationCodeGenerate(uuid: String!, phoneNumber: String!): String! # returns smsCode
  phoneActivate(
    uuid: String!
    phoneNumber: String!
    smsCode: String!
    nickName: String!
  ): String! # returns secure token
  placeCreate(
    uuid: String!
    phoneNumber: String!
    token: String!

    placeName: String!
    streetAddress1: String!
    streetAddress2: String!
    city: String!
    country: String!
    district: String!
    isoCountryCode: String!
    postalCode: String!
    region: String!
    subregion: String!
    timezone: String!
    lat: Float!
    lon: Float!
  ): Place!

  generateUploadUrl(
    uuid: String!
    phoneNumber: String!
    token: String!

    assetKey: String! # has to be in uuid format
    contentType: String!
    placeUuid: String #optional # chatUuid: String # optional
  ): PhotoForUpload!
}

# ... ******************************************************
# ...                    subscriptions
# ... ******************************************************

# only works with nullable return types, the return type must match corresponding mutation
# type Subscription {
#   onSendMessage(chatUuid: String)
# }
