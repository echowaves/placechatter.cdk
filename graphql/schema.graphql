schema {
  query: Query
  mutation: Mutation
  # subscription: Subscription
}

# ... ******************************************************
# ...                   types
# ... ******************************************************
type Phone {
  uuid: String!
  phoneNumber: String!
  nickName: String!
  token: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type ActivationRequest {
  uuid: String!
  phoneNumber: String!
  smsCode: String!
  confirmed: Boolean!
  createdAt: AWSDateTime!
  confirmedAt: AWSDateTime!
}

type Place {
  placeUuid: String!
  placeName: String!
  placeDescription: String!
  streetAddress1: String!
  streetAddress2: String!
  city: String!
  country: String!
  district: String!
  isoCountryCode: String!
  postalCode: String!
  region: String!
  subregion: String!
  timezone: String!
  location: AWSJSON!

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type PlaceOwner {
  placeUuid: String!
  phoneNumber: String!
  role: String!
  createdAt: AWSDateTime!
}
type PlaceDetails {
  place: Place!
  placeOwner: PlaceOwner!
}

# ... ******************************************************
# ...                   queries
# ... ******************************************************
type Query {
  nickNameTypeAhead(phoneNumber: String!, nickName: String!): Int!
  placeDetails(
    uuid: String!
    phoneNumber: String!
    token: String!

    placeUuid: String!
  ): PlaceDetails!
}

# ... ******************************************************
# ...                    mutations
# ... ******************************************************
type Mutation {
  activationCodeGenerate(uuid: String!, phoneNumber: String!): String! # returns smsCode
  phoneActivate(
    uuid: String!
    phoneNumber: String!
    smsCode: String!
    nickName: String!
  ): String! # returns secure token
  placeCreate(
    uuid: String!
    phoneNumber: String!
    token: String!

    placeName: String!
    streetAddress1: String!
    streetAddress2: String!
    city: String!
    country: String!
    district: String!
    isoCountryCode: String!
    postalCode: String!
    region: String!
    subregion: String!
    timezone: String!
    lat: Float!
    lon: Float!
  ): PlaceDetails!

  placeDescriptionUpdate(
    uuid: String!
    phoneNumber: String!
    token: String!

    placeUuid: String!
    placeDescription: String!
  ): String! # return 'OK' if it worked
}

# ... ******************************************************
# ...                    subscriptions
# ... ******************************************************

# only works with nullable return types, the return type must match corresponding mutation
# type Subscription {
#   onSendMessage(chatUuid: String)
# }
